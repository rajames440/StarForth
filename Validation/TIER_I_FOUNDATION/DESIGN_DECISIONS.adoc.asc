-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

////
StarForth Design Decisions Document

Document Metadata:
- - Document ID: starforth-governance/design-decisions
- - Version: 1.0.0
- - Created: 2025-10-25
- - Purpose: Document major architectural decisions with rationale
- - Scope: Core design choices and tradeoffs
- - Status: COMPLETE
////

= StarForth Design Decisions

**Version:** 1.0.0
**Status:** Complete
**Last Updated:** 2025-10-25

- ---

== Decision 1: Fixed 5MB Arena vs. Dynamic Allocation

**Decision:** Use fixed 5MB linear memory arena instead of malloc/free.

**Alternatives Considered:**
1. Dynamic malloc/free with fragmentation management
2. Garbage-collected heap
3. Fixed arena (CHOSEN)

**Rationale:**
- - **Predictability:** Allocation patterns are deterministic
- - **Embedded-friendly:** No heap fragmentation issues
- - **Memory safety:** Bounds checking on all access
- - **Simplicity:** Linear allocator trivial to implement
- - **Isolation:** Sufficient for FORTH-79 compliance without external allocation

**Tradeoffs:**
- - ✓ Faster, safer allocation
- - ✓ No fragmentation
- - ✓ Deterministic memory use
- - ✗ Cannot run programs requiring >5MB
- - ✗ No dynamic resizing

**Implications:** All data (dictionary, user blocks, stacks) fit within 5MB. Suitable for embedded and IoT systems.

- ---

== Decision 2: Direct-Threaded Interpreter vs. Bytecode VM

**Decision:** Implement direct-threaded interpreter (function pointers) rather than bytecode-based VM.

**Alternatives Considered:**
1. Bytecode interpreter with instruction fetch-decode-execute loop
2. Compiled native code (JIT)
3. Direct-threaded (CHOSEN)

**Rationale:**
- - **Simplicity:** Each word = C function. No instruction set to define.
- - **Performance:** Direct function calls faster than instruction dispatch
- - **Implementation:** Leverages C compiler optimizations
- - **Portability:** Bytecode would require VM-specific instruction decoder

**Tradeoffs:**
- - ✓ Simpler code
- - ✓ Better performance
- - ✓ Portable (no custom bytecode format)
- - ✗ Larger code footprint (each word is separate function)
- - ✗ Less flexible instruction-level control

**Implications:** Each FORTH word is a C function with signature `void word_func(struct VM *vm)`. Colon definitions compile references to these function pointers.

- ---

== Decision 3: 19 Semantic Modules vs. Monolithic Implementation

**Decision:** Organize word implementations into 19 functional modules rather than single monolithic file.

**Alternatives Considered:**
1. Single vm.c file with all words
2. One file per word (138+ files)
3. 19 functional modules by domain (CHOSEN)

**Rationale:**
- - **Maintainability:** Related words grouped together
- - **Clarity:** Each module has clear purpose
- - **Scalability:** Easy to add new word categories
- - **Testing:** Module-level testing possible
- - **Documentation:** Natural unit for documentation

**Tradeoffs:**
- - ✓ Clear organization
- - ✓ Easier to understand and maintain
- - ✓ Facilita

tes testing
- - ✗ More files to manage
- - ✗ Slightly more complex build

**Implications:** 19 modules (arithmetic, stack, memory, control, etc.), each implementing 3-18 words. Improves code organization without runtime overhead.

- ---

== Decision 4: Dictionary-Based Isolation vs. MMU-Based

**Decision:** Use dictionary boundaries and address validation instead of MMU (Memory Management Unit) for isolation.

**Alternatives Considered:**
1. Rely on OS MMU for protection
2. Dictionary boundaries + validation (CHOSEN)
3. Capability model (deferred to Phase 3)

**Rationale:**
- - **Portability:** Works on systems without MMU (embedded)
- - **Simplicity:** No dependency on OS memory protection
- - **Control:** Can protect critical regions (fence)
- - **Future-proof:** Enables capability model later

**Tradeoffs:**
- - ✓ Works on bare metal / embedded
- - ✓ No OS dependency
- - ✓ Clear isolation semantics
- - ✗ Less secure than MMU-based (bounds checking required)
- - ✗ Potential for deliberate circumvention (not concern for FORTH-79)

**Implications:** All memory access via `vm_load_cell()` and `vm_store_cell()` which validate addresses. Dictionary fence prevents FORGET from removing system words.

- ---

== Decision 5: FORTH-79 Standard vs. Modern Forth Dialects

**Decision:** Implement FORTH-79 standard rather than modern variations (Forth 2012, SwiftForth, etc.).

**Alternatives Considered:**
1. Modern FORTH-2012 standard
2. Dialect-specific (e.g., Gforth, VFX)
3. FORTH-79 standard (CHOSEN)

**Rationale:**
- - **Simplicity:** Fewer words, clearer spec
- - **Maturity:** 40+ years of stability
- - **Compatibility:** Widest applicability
- - **Minimalism:** Intentional simplicity aligns with StarForth philosophy
- - **Validation:** Well-defined acceptance tests

**Tradeoffs:**
- - ✓ Simpler specification
- - ✓ Stable, well-defined
- - ✓ Widely understood
- - ✗ Missing modern conveniences
- - ✗ Limited floating-point support

**Implications:** Implement exactly 70 core FORTH-79 words. Extensions (StarForth words) can be added without violating standard compliance.

- ---

== Decision 6: Strict ANSI C99 vs. C11/C17

**Decision:** Code must compile with `gcc -std=c99 -Wall -Werror` (no C11/C17 features).

**Alternatives Considered:**
1. C11 with _Generic, _Atomic, etc.
2. C17 with more features
3. Strict C99 (CHOSEN)

**Rationale:**
- - **Portability:** C99 widely supported on older systems
- - **Simplicity:** Avoids newer language features
- - **Compatibility:** Works on embedded toolchains
- - **Future-proof:** C99 is stable target

**Tradeoffs:**
- - ✓ Maximum compatibility
- - ✓ No modern language dependencies
- - ✓ Works on old compilers
- - ✗ Can't use newer C conveniences
- - ✗ Some patterns less elegant

**Implications:** No variable-length arrays in structs, no inline functions (use static), no designated initializers beyond what C99 allows.

- ---

== Decision 7: Two-Stack Model (Data + Return) vs. Single Stack

**Decision:** Maintain separate data stack and return stack (1024 cells each) rather than unified stack.

**Alternatives Considered:**
1. Single unified stack with type tags
2. Two separate stacks (CHOSEN)
3. Three stacks (add locals stack)

**Rationale:**
- - **FORTH-79 compliance:** Standard requires two stacks
- - **Performance:** Separate allows stack pointer registers
- - **Safety:** Prevents return addresses from being corrupted by data
- - **Simplicity:** Two simpler stacks than tagged unified stack

**Tradeoffs:**
- - ✓ Matches FORTH-79 standard
- - ✓ Prevents stack corruption
- - ✓ Simpler than tagged stacks
- - ✗ Less flexible for some algorithms
- - ✗ Requires >R/R> for temporary storage

**Implications:** Data stack (parameter stack) is primary. Return stack holds return addresses and loop variables. Limited cross-stack operations via >R/R>/R@.

- ---

== Decision 8: Linked-List Dictionary vs. Hash Table

**Decision:** Implement dictionary as linked list with first-character optimization rather than hash table.

**Alternatives Considered:**
1. Hash table with collision resolution
2. Linked list (CHOSEN)
3. Trie or other tree structure

**Rationale:**
- - **Simplicity:** Linked list easy to implement and debug
- - **Dynamic:** No pre-allocated hash table
- - **Determinism:** Search order matches definition order
- - **FORTH-79 compliance:** Matches standard behavior

**Tradeoffs:**
- - ✓ Simple, deterministic
- - ✓ Matches FORTH-79 semantics
- - ✓ Works with dynamic definitions
- - ✗ O(n) lookup time
- - ✗ First-character optimization only partial speedup

**Implications:** Word lookup traverses linked list backward from latest word. First-character hashing speeds up search for words starting with same letter.

- ---

== Summary of Key Decisions

| Decision | Choice | Rationale |
|----------|--------|-----------|
| Memory Model | Fixed 5MB arena | Predictable, embedded-friendly |
| Execution | Direct-threaded | Simple, fast, portable |
| Organization | 19 modules | Clear, maintainable |
| Isolation | Dictionary boundaries | Works on bare metal |
| Standard | FORTH-79 | Stable, well-defined |
| Language | ANSI C99 | Maximum compatibility |
| Stacks | Data + Return (2) | FORTH-79 compliance |
| Dictionary | Linked list | Simple, deterministic |

- ---

== Validation Against Code

✓ All design decisions verified in source code:
- - 5MB arena: `#define VM_MEMORY_SIZE (5 * 1024 * 1024)` in vm.h
- - Direct-threaded: Each word is `void word_func(struct VM *vm)` function pointer
- - 19 modules: All present in src/word_source/
- - Dictionary boundaries: Fence implementation in dictionary_words.c
- - FORTH-79: 70 core words implemented, no extra words required
- - C99: Build flags `-std=c99 -Wall -Werror` enforce compliance
- - Two stacks: Data stack and return stack in VM struct
- - Linked list: `DictEntry *link` pointer in dictionary structure

- ---

== Document History

[cols="^1,^2,2,<4"]
|===
| Version | Date | Author | Change Summary

| 1.0.0
| 2025-10-25
| Validation Engineer
| Created design decisions document with 8 major decisions
|===

- ---

== Document Approval & Signature

[cols="2,2,1"]
|===
| Role | Name/Title | Signature

| **Author/Maintainer**
| Robert A. James
|

| **Date Approved**
| 25 October, 2025
| _______________

| **PGP Fingerprint**
| 497CF5C0D295A7E8065C5D9A9CD3FBE66B5E2AE4
|

|===

**PGP Signature Block:**
```
- -----BEGIN PGP SIGNATURE-----

[Your PGP signature here - generated via: gpg --clearsign DESIGN_DECISIONS.adoc]

- -----END PGP SIGNATURE-----
```

**To Sign This Document:**
```bash
gpg --clearsign DESIGN_DECISIONS.adoc
# This creates DESIGN_DECISIONS.adoc.asc (signed version)
```

**To Verify Signature:**
```bash
gpg --verify DESIGN_DECISIONS.adoc.asc
```

**Archive Location:** ~/StarForth-Governance/Validation/TIER_I_FOUNDATION/
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEESXz1wNKVp+gGXF2anNP75mteKuQFAmj9apAACgkQnNP75mte
KuSw0w//fw1zd7dEqhp5nXGjXMV9aJK9gZubwerEN3pjUYuiu4xWa4fVvajOTPoF
G5PFWV+aTi474akO6FgVxFOEiTMiMC9vsqHyJLptEEuEkKtuzjimScpQ8G+GY3Bt
6XbsEj1xgPl5RP4sMFutYUS4MnYLNXLPHMExX3sYolLqxHEMEruI0p7b+un4HbyH
BhXRNVJR36iN+vFtGvCj/V/2UzDEFsifWzNyvP+tiI36Q1gcieZD6BIt4OMwR38g
U0r3YZCj3oQKrhPIZ6AQ7KQqW4kUrxbVHcw9vGInvJ87iM21XZWdT+/KfRfMKjjS
xQT9fDuPkTU4KjH1PMLp9pwuormHHHWvynX3+kyptT+yjAyInKHJEuVq0Nfz8Ojz
JXnglltWZY+OIdeZAPpy12Fx3/TI9y80gwXyADu4T0aVOqPIVg8KSZMGywUE8s/Z
MI1nX71ApGZgnfVfuTW93CGlbGU9nZbVjgfdINpYXANrsfmcubxlXHeKAN4Ssc2i
5JmpFiiK/0jZbb+eLGweattEyFzmjxD6AR4fxUtpZKWw9zLL8aciFjLPv7UeK4G1
VdLeSq01D3zBHlUSVLMK1LHQy9dWwYqt3v1VDiVB8nYAQazMdd2Sn55Ln4S3IhR+
QBIT16i7+1Co2KYk2X9ZMy4oXbtKQh5oULFtlMKHiUpmGnCIQY4=
=gE+N
-----END PGP SIGNATURE-----
