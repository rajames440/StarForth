-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

////
StarForth Acceptance Criteria - All Tiers

Document Metadata:
- - Document ID: starforth-governance/acceptance-criteria-all-tiers
- - Version: 1.0.0
- - Created: 2025-10-25
- - Purpose: Define general acceptance rules and principles across all tiers
- - Scope: Philosophy, minimum standards, deficiency management
- - Status: CRITERIA FRAMEWORK
////

= StarForth Acceptance Criteria: All Tiers

**Version:** 1.0.0
**Status:** Active
**Last Updated:** October 25, 2025

- ---

== Executive Summary

This document defines the **general rules** that apply to accepting any tier as "complete."

Tier-specific acceptance criteria are in `TIER_X_ACCEPTANCE_CRITERIA.adoc`.
These are the **foundation rules** that all tiers follow.

- ---

== Core Principles

=== 1. Evidence Over Assertion

**No hand-waving.**

Every claim must be backed by:
- - Test results (logged with date, pass/fail, platform)
- - Code analysis (tool reports, baseline metrics)
- - Documentation (requirements traceability, design rationale)
- - Measurements (code coverage %, quality scores, defect count)

**What this means:**
- - ✓ "All 675+ tests pass" — evidence: test log showing pass date/time/platform
- - ✗ "Tests probably pass" — NOT ACCEPTABLE
- - ✓ "Code quality is 95% (0 critical, 3 high)" — evidence: SonarQube report
- - ✗ "Code looks clean" — NOT ACCEPTABLE

- ---

=== 2. Reproducibility

**Every result must be reproducible.**

Test results must include:
- - [ ] What was tested (specific build/version)
- - [ ] How it was tested (exact commands)
- - [ ] When it was tested (date/time)
- - [ ] Who tested it (name/email)
- - [ ] What platform (OS, CPU, compiler)
- - [ ] Results (pass/fail with details)
- - [ ] Full logs (not just summary)

**Example:**
```
Test: FORTH79-TEST-ADD
Date: 2025-10-25T14:30:00Z
Tester: validation-engineer@starforth.io
Platform: Linux x86_64, GCC 11.2.0, strict ANSI C99
Command: make test-forth79
Result: PASS (1000 iterations, 100% pass rate)
Log: tests/results/FORTH79-TEST-ADD-20251025.log
```

**Not acceptable:**
```
Test: FORTH79-TEST-ADD
Result: PASS
```

- ---

=== 3. Traceable Everything

**Chain of custody for every artifact.**

- - Requirement REQ-FORTH-79-ADD traces to Test FORTH79-TEST-ADD
- - Test FORTH79-TEST-ADD traces to Code arith_words.c:ADD()
- - Code ADD() traces back to Requirements Specification, section 2.1.3
- - Test results logged with date and sign-off

**Tool:** Requirements Traceability Matrix (RTM) maintained throughout.

- ---

=== 4. Deficiency Transparency

**If something doesn't pass, we say so.**

Deficiencies are:
1. **Logged immediately** — Date, what, severity, owner
2. **Root cause analyzed** — Why didn't it pass?
3. **Corrected** — Fix implemented and re-tested
4. **Closed** — Evidence that correction works
5. **Metrics updated** — Overall deficiency count updated

**No burying bad news.** Deficiencies are visible in `SHARED/DEFICIENCY_LOG.adoc`.

**Acceptable closing options:**
- - Fix the issue (correction)
- - Document exception with justification (waiver)
- - Defer to next version (TBD with timeline)

**Not acceptable:**
- - Ignoring it
- - Hiding it
- - Claiming it doesn't matter

- ---

=== 5. No Partial Compliance

**A tier is either PASS or IN-PROGRESS, never PARTIAL.**

If one protocol fails:
- - [ ] Tier remains IN-PROGRESS
- - [ ] Deficiency logged
- - [ ] Correction executed
- - [ ] Re-test executed
- - [ ] Then PASS

**Can't claim Tier I passed if one test fails.**
Can't claim Tier II passed if MISRA C scan has unclosed exceptions.

- ---

=== 6. Formal Sign-Off

**Tiers are certified by role, not by wishful thinking.**

Three signatures required on every tier completion:

| Role | Responsibility | Signature |
|------|-----------------|-----------|
| **Validation Engineer** | Executed protocols correctly, logged results accurately | ________________ |
| **Review Authority** | Reviewed all evidence, verified acceptance criteria met | ________________ |
| **Maintainer** | Accepts responsibility for tier, approves release | ________________ |

No tier is "done" without all three signatures on the `FINAL_REPORT_TIER_X.adoc`.

- ---

== Acceptance Workflow

Every tier follows this workflow:

[source,text]
- ----
1. PLAN
   - Define acceptance criteria (Tier-specific)
   - Write protocols
   - Assign resources

2. EXECUTE
   - Follow protocol step-by-step
   - Log all results (date, platform, pass/fail)
   - Test on all platforms (Linux x86_64, ARM64, etc.)

3. ANALYZE
   - Review results
   - Identify deficiencies
   - Root cause analysis

4. REMEDIATE
   - Fix issues or document exceptions
   - Re-test (prove fix works)
   - Update deficiency log

5. VALIDATE
   - Confirm all acceptance criteria met
   - Verify no orphan deficiencies
   - Review metrics dashboard

6. CERTIFY
   - Validation Engineer signs: "I executed correctly"
   - Review Authority signs: "I verified this is correct"
   - Maintainer signs: "I accept this tier"
   - Archive as FINAL_REPORT_TIER_X.adoc

7. TRANSITION
   - Next tier can begin
   - Or release v1.0/v2.0/v3.0
- ----

- ---

== Deficiency Management

=== Severity Levels

Every deficiency is assigned **severity:**

[cols="2,2,2"]
|===
| Severity | Definition | Max Time to Close

| **CRITICAL**
| Blocks acceptance of tier, or indicates serious flaw
| 1 week

| **HIGH**
| Impacts functionality or quality, must be fixed or waived
| 2 weeks

| **MEDIUM**
| Minor issue, acceptable with documented exception
| 4 weeks

| **LOW**
| Cosmetic or future improvement, can be deferred
| Can defer to next version

|===

=== Deficiency Lifecycle

Every deficiency has:
1. **ID** — DEF-2025-001, DEF-2025-002, etc. (serial by year)
2. **Description** — What is the issue?
3. **Severity** — CRITICAL / HIGH / MEDIUM / LOW
4. **Root Cause** — Why did it happen?
5. **Corrective Action** — How will we fix it?
6. **Test Plan** — How will we prove it's fixed?
7. **Status** — OPEN / CLOSED / DEFERRED
8. **Owner** — Who is responsible?
9. **Deadline** — By when must it be closed?
10. **Evidence** — What proves it's fixed?

**Deficiency Log:** `SHARED/DEFICIENCY_LOG.adoc`

- ---

=== Waiver Exceptions

Sometimes we **don't fix** a deficiency, we **waive it** (document an exception).

Valid reasons to waive:
- - **Technical reason:** "StarForth never calls malloc, so CWE-401 (memory leak) is not applicable"
- - **Design decision:** "We use direct-threaded interpreter for performance; some MISRA rules don't apply"
- - **Phase deferral:** "Formal proofs deferred to Phase 3"

**Invalid reasons to waive:**
- - ✗ "We're lazy"
- - ✗ "It's too hard"
- - ✗ "It doesn't matter"
- - ✗ "Nobody will know"

Every waiver must be documented with technical justification, not just excuses.

- ---

## Quality Gates

=== Tier Entry Gate

Before starting a tier:
- - [ ] Previous tier fully complete and signed off
- - [ ] Resources assigned (Validation Engineer, Review Authority)
- - [ ] Timeline allocated
- - [ ] Tier-specific protocols written

=== Tier Exit Gate

Before certifying a tier complete:
- - [ ] All protocols executed
- - [ ] All results logged
- - [ ] All deficiencies resolved (fixed or waived)
- - [ ] Deficiency count <= acceptable threshold
- - [ ] Code coverage >= acceptance threshold
- - [ ] Quality metrics >= acceptance threshold
- - [ ] Metrics dashboard complete
- - [ ] Final report written and reviewed

- ---

== Acceptance Thresholds

=== Code Coverage

| Metric | Minimum | Desired |
|--------|---------|---------|
| Line coverage | 90% | 95%+ |
| Branch coverage | 80% | 90%+ |
| Function coverage | 100% | 100% |

### Code Quality

| Metric | Tier I | Tier II |
|--------|--------|---------|
| Critical issues | 0 | 0 |
| High issues | <10 | <5 |
| Defects/1000 LOC | N/A | <5 |
| Cyclomatic complexity avg | <15 | <10 |

### Test Results

| Metric | Tier I | Tier II | Tier III |
|--------|--------|---------|----------|
| FORTH-79 tests pass | 100% | 100% | 100% |
| Platform coverage | 2+ (x86_64, ARM64) | 2+ | 2+ |
| Flaky tests | 0 | 0 | 0 |

### Deficiency Count

| Tier | Max Critical | Max High | Max Medium | Max Low |
|------|------|------|------|------|
| I | 0 | 5 | 10 | 20 |
| II | 0 | 3 | 7 | 15 |
| III | 0 | 0 | 0 | 5 |

**Thresholds are negotiable but only by maintainer decision + documented waiver.**

- ---

## Metrics Dashboard

Every tier maintains a **METRICS_TRACKING.adoc** with:

- - Code coverage trend (should be increasing)
- - Critical/high issue count (should be decreasing)
- - Deficiency count (should be decreasing)
- - Test pass rate (should be 100%)
- - Acceptance criteria pass rate (by tier)

**Updated:** Weekly during validation phase

**Purpose:** Visibility into progress and early warning of problems

- ---

## Documentation Standards

### Every Document Must Have

| Element | Purpose |
|---------|---------|
| **Document ID** | Unique identifier (e.g., starforth-governance/tier-i-overview) |
| **Version** | Document version (1.0.0, 1.1.0, etc.) |
| **Status** | DRAFT, REVIEW, APPROVED, OBSOLETE |
| **Last Updated** | Date document was last modified |
| **Purpose** | One-sentence statement of why document exists |
| **Scope** | What does document cover (and not cover) |
| **Table of Contents** | For documents >5 pages |
| **Document History** | Version log at end |

### Example Header

```
////
StarForth Example Document

Document Metadata:
- - Document ID: starforth-governance/example-doc
- - Version: 1.0.0
- - Created: 2025-10-25
- - Purpose: Explain the structure of StarForth documents
- - Scope: All governance and validation documents
- - Status: APPROVED
////
```

- ---

## Testing Standards

### Every Test Must Have

| Element | Purpose |
|---------|---------|
| **Test ID** | Unique identifier (e.g., FORTH79-TEST-ADD) |
| **Purpose** | What does this test validate? |
| **Inputs** | What data is input to the test? |
| **Expected Output** | What should the test result be? |
| **Actual Output** | What was the actual result? (filled in after execution) |
| **Status** | PASS / FAIL |
| **Date** | When was test executed? |
| **Platform** | On what platform was test executed? |
| **Log File** | Full log of test execution |

- ---

## Platform Coverage Requirements

Every tier must be validated on **minimum 2 platforms:**

- - [ ] Linux x86_64 (GCC)
- - [ ] Linux ARM64 (GCC)
- - [Optional] Fiasco.OC (if Phase 1)
- - [Optional] seL4 (if Phase 2)

**Same code, different platforms.** No "probably works on ARM64" — must be tested.

- ---

## Release Decision Criteria

### Tier I Complete → Can Release v1.0

- - ✓ All Tier I acceptance criteria met
- - ✓ All Tier I protocols executed and logged
- - ✓ All Tier I deficiencies closed
- - ✓ Tier I Final Report signed

**Even if Tier II not started yet.**

### Tier I-II Complete → Can Release as Stable

- - ✓ Tier I complete + signed
- - ✓ Tier II complete + signed
- - ✓ Combined metrics acceptable
- - ✓ No CRITICAL deficiencies

**Tier III not required for stable release.**

### Tier I-III Complete → Can Release as Formally Verified

- - ✓ Tiers I-II complete + signed
- - ✓ Tier III complete + signed
- - ✓ All proofs verified (no `sorry` statements)
- - ✓ All deficiencies closed

- ---

## Document History

[cols="^1,^2,2,<4"]
|===
| Version | Date | Author | Change Summary

| 1.0.0
| 2025-10-25
| rajames
| Created general acceptance criteria framework for all tiers
|===

- ---

== Document Approval & Signature

[cols="2,2,1"]
|===
| Role | Name/Title | Signature

| **Author/Maintainer**
| Robert A. James
|

| **Date Approved**
|
| _______________

| **PGP Fingerprint**
| 497CF5C0D295A7E8065C5D9A9CD3FBE66B5E2AE4
|

|===

**PGP Signature Block:**
```
- -----BEGIN PGP SIGNATURE-----

[Your PGP signature here - generated via: gpg --clearsign ACCEPTANCE_CRITERIA_ALL_TIERS.adoc]

- -----END PGP SIGNATURE-----
```

**To Sign This Document:**
```bash
gpg --clearsign ACCEPTANCE_CRITERIA_ALL_TIERS.adoc
# This creates ACCEPTANCE_CRITERIA_ALL_TIERS.adoc.asc (signed version)
```

**To Verify Signature:**
```bash
gpg --verify ACCEPTANCE_CRITERIA_ALL_TIERS.adoc.asc
```

- ---

**Next:** Read `STANDARDS_REFERENCE.adoc` for standards mapping.

**StarForth:** Clear acceptance. No ambiguity.
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEESXz1wNKVp+gGXF2anNP75mteKuQFAmj9MDEACgkQnNP75mte
KuR2qQ/9HFdMay33B8BxgKpSuEETXeSw8etvWpisM2+ZoaBCw/hTjR01TS2oPHoD
PMeHPuOnXjfNKJC385WyaDg4OLX/biEqEkp05hy0u51sfS11A3/t/zXeQdW9cSzw
cvKwZL2BLREA2XhN2wuduHq53NRuR2wGTEY39HqhB5Z9G6cb5iDzFLNn1/kC3UDR
8oJcAo090/Uyen4ir110+YqQ0CWUz1RXvs3zf/VKyT7mdo+viiBy+AKsESkXSMc0
uvAg7kT70t1ZRxQ5818CWYUUC4AfvlRu8nf/f77ZyAwizHDHo9DO+yXcQ+InZBjt
S3VpXI32oW9OWGGUjOwqIyKexm/OeFGXGN/QBDa78q1d8mLyE/7JCvHIhP7lD0yF
KBCBGPoI8XRjuLUkR2qa4Mrfcqg1FdKYt8rzLyMW0FWuv/jJO3XJx9XQSDTICrAU
9EJIF1fhAow0gtiGjhYSVlA0FDW9nJXKmkPnqVRJiHanQz+pHT2rsMOPFae8FDc+
Jbmv5/+7cA0CiRilusgjHup9+GW0v2+GY/cw7b9ruph/cblflPhvryM5TJ8xABmJ
KQUgfzQ2BN1MLcHD0Y97+Soq1ElqS6foyBVr3VWXM/SwaJE/aEk1g7sz2R6DBab9
8yaJIm03+x39DNezaoyyo+Cwjo1aU8yLM0uQywejMGoygjGj0JA=
=oXbe
-----END PGP SIGNATURE-----
