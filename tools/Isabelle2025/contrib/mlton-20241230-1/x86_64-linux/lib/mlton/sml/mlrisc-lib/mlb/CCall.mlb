
ann
  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
  "redundantBind warn" "redundantMatch warn"
  "sequenceNonUnit ignore"
  "warnUnused false" "forceUsed"
  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
in

local
  basis l4 =
    bas
      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
    end
  basis l18 =
    bas
      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
    end
  basis l14 =
    bas
      (* $StagedAlloc.cm(=(proxyLib.cm):.)/StagedAlloc.cm =??=> *) StagedAlloc.mlb
    end
in
local
   $(SML_LIB)/basis/pervasive.mlb
   local
      open l4
   in
      structure gs_0 = List
   end
   local
      structure List = gs_0
      ../c-call/gen/c-type.sml
   in
      structure gs_1 = CType
   end
   local
      open l4
   in
      structure gs_2 = ListPair
   end
   local
      open l14
   in
      signature gs_3 = STAGED_ALLOCATION
   end
   local
      open l18
   in
      signature gs_4 = CELLS
   end
   local
      open l18
   in
      signature gs_5 = MLTREE
   end
   local
      open l14
   in
      structure gs_6 = CLocKind
   end
   local
      structure CLocKind = gs_6
      signature MLTREE = gs_5
      signature STAGED_ALLOCATION = gs_3
      ../c-call/gen/c-call-gen-sig.sml
   in
      signature gs_7 = C_CALL_GEN
   end
   local
      signature CELLS = gs_4
      structure CLocKind = gs_6
      signature C_CALL_GEN = gs_7
      structure List = gs_0
      structure ListPair = gs_2
      signature MLTREE = gs_5
      signature STAGED_ALLOCATION = gs_3
      ../c-call/gen/c-call-gen-fn.sml
   in
      functor gs_8 = CCallGenFn
   end
   local
      structure CType = gs_1
      signature C_CALL_GEN = gs_7
      signature MLTREE = gs_5
      ../c-call/gen/c-call-sig.sml
   in
      signature gs_9 = C_CALL
   end
in
   functor CCallGenFn = gs_8
   structure CType = gs_1
   signature C_CALL = gs_9
   signature C_CALL_GEN = gs_7
end
end

end
