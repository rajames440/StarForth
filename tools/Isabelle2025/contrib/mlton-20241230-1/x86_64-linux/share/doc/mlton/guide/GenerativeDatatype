<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>GenerativeDatatype</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<link rel="stylesheet" href="./asciidoctor.css">
<link rel="stylesheet" href="./rouge-github.css">
<link rel="stylesheet" href="./mlton.css">

</head>
<body class="article">
<div id="mlton-header">
<div id="mlton-header-text">
<h2>
<a href="./Home">
MLton
20241230
</a>
</h2>
</div>
</div>
<div id="header">
<h1>GenerativeDatatype</h1>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In <a href="StandardML">Standard ML</a>, datatype declarations are said to be
<em>generative</em>, because each time a datatype declaration is evaluated,
it yields a new type.  Thus, any attempt to mix the types will lead to
a type error at compile-time.  The following program, which does not
type check, demonstrates this.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">functor</span> <span class="nn">F</span> <span class="p">()</span> <span class="p">=</span>
   <span class="kr">struct</span>
      <span class="kr">datatype</span> <span class="kt">t</span> <span class="p">=</span> <span class="nc">T</span>
   <span class="kr">end</span>
<span class="kr">structure</span> <span class="nn">S1</span> <span class="p">=</span> <span class="n">F</span> <span class="p">()</span>
<span class="kr">structure</span> <span class="nn">S2</span> <span class="p">=</span> <span class="n">F</span> <span class="p">()</span>
<span class="kr">val</span> <span class="nv">_</span><span class="p">:</span> <span class="nn">S1</span><span class="p">.</span><span class="n">t</span> <span class="p">-&gt;</span> <span class="nn">S2</span><span class="p">.</span><span class="n">t</span> <span class="p">=</span> <span class="kr">fn</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Generativity also means that two different datatype declarations
define different types, even if they define identical constructors.
The following program does not type check due to this.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">datatype</span> <span class="kt">t</span> <span class="p">=</span> <span class="nc">A</span> <span class="p">|</span> <span class="nc">B</span>
<span class="kr">val</span> <span class="nv">a1</span> <span class="p">=</span> <span class="n">A</span>
<span class="kr">datatype</span> <span class="kt">t</span> <span class="p">=</span> <span class="nc">A</span> <span class="p">|</span> <span class="nc">B</span>
<span class="kr">val</span> <span class="nv">a2</span> <span class="p">=</span> <span class="n">A</span>
<span class="kr">val</span> <span class="nv">_</span> <span class="p">=</span> <span class="kr">if</span> <span class="n">true</span> <span class="kr">then</span> <span class="n">a1</span> <span class="kr">else</span> <span class="n">a2</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_also_see">Also see</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="GenerativeException">GenerativeException</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div id="mlton-footer">
<div id="mlton-footer-text">
<div>
Last updated Thu Oct 21 15:53:06 2021 -0400 by Matthew Fluet.
<a href="https://github.com/MLton/mlton/commits/master/doc/guide/src/GenerativeDatatype.adoc">Log</a>
<a href="https://github.com/MLton/mlton/edit/master/doc/guide/src/GenerativeDatatype.adoc">Edit</a>
</div>
</div>
</body>
</html>