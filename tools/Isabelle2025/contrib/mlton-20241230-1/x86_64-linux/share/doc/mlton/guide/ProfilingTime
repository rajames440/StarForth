<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>ProfilingTime</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<link rel="stylesheet" href="./asciidoctor.css">
<link rel="stylesheet" href="./rouge-github.css">
<link rel="stylesheet" href="./mlton.css">

</head>
<body class="article">
<div id="mlton-header">
<div id="mlton-header-text">
<h2>
<a href="./Home">
MLton
20241230
</a>
</h2>
</div>
</div>
<div id="header">
<h1>ProfilingTime</h1>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>With MLton and <code>mlprof</code>, you can <a href="Profiling">profile</a> your program to
find out how much time is spent in each function over an entire run of
the program.  To do so, compile your program with <code>-profile time</code>.
For example, suppose that <code>tak.sml</code> contains the following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">structure</span> <span class="nn">Tak</span> <span class="p">=</span>
   <span class="kr">struct</span>
      <span class="kr">fun</span> <span class="nf">tak1</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="p">=</span>
         <span class="kr">let</span>
            <span class="kr">fun</span> <span class="nf">tak2</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="p">=</span>
               <span class="kr">if</span> <span class="n">y</span> <span class="n">&gt;=</span> <span class="n">x</span>
                  <span class="kr">then</span> <span class="n">z</span>
               <span class="kr">else</span>
                  <span class="n">tak1</span> <span class="p">(</span><span class="n">tak2</span> <span class="p">(</span><span class="n">x</span> <span class="n">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span>
                        <span class="n">tak2</span> <span class="p">(</span><span class="n">y</span> <span class="n">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span>
                        <span class="n">tak2</span> <span class="p">(</span><span class="n">z</span> <span class="n">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
         <span class="kr">in</span>
            <span class="kr">if</span> <span class="n">y</span> <span class="n">&gt;=</span> <span class="n">x</span>
               <span class="kr">then</span> <span class="n">z</span>
            <span class="kr">else</span>
               <span class="n">tak1</span> <span class="p">(</span><span class="n">tak2</span> <span class="p">(</span><span class="n">x</span> <span class="n">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span>
                     <span class="n">tak2</span> <span class="p">(</span><span class="n">y</span> <span class="n">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span>
                     <span class="n">tak2</span> <span class="p">(</span><span class="n">z</span> <span class="n">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
         <span class="kr">end</span>
   <span class="kr">end</span>

<span class="kr">val</span> <span class="nv">rec</span> <span class="n">f</span> <span class="p">=</span>
   <span class="kr">fn</span> <span class="mi">0</span> <span class="p">=&gt;</span> <span class="p">()</span>
    <span class="p">|</span> <span class="mi">~1</span> <span class="p">=&gt;</span> <span class="n">print</span> <span class="s2">"this branch is not taken</span><span class="se">\n</span><span class="s2">"</span>
    <span class="p">|</span> <span class="n">n</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nn">Tak</span><span class="p">.</span><span class="n">tak1</span> <span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="p">;</span> <span class="n">f</span> <span class="p">(</span><span class="n">n-</span><span class="mi">1</span><span class="p">))</span>

<span class="kr">val</span> <span class="nv">_</span> <span class="p">=</span> <span class="n">f</span> <span class="mi">5000</span>

<span class="kr">fun</span> <span class="nf">uncalled</span> <span class="p">()</span> <span class="p">=</span> <span class="p">()</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Compile with time profiling and run the program.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>% mlton -profile time tak.sml
% ./tak</pre>
</div>
</div>
<div class="paragraph">
<p>Display the profiling data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>% mlprof tak mlmon.out
6.00 seconds of CPU time (0.00 seconds GC)
function     cur
------------- -----
Tak.tak1.tak2 75.8%
Tak.tak1      24.2%</pre>
</div>
</div>
<div class="paragraph">
<p>This example shows how <code>mlprof</code> indicates lexical nesting: as a
sequence of period-separated names indicating the structures and
functions in which a function definition is nested.  The profiling
data shows that roughly three-quarters of the time is spent in the
<code>Tak.tak1.tak2</code> function, while the rest is spent in <code>Tak.tak1</code>.</p>
</div>
<div class="paragraph">
<p>Display raw counts in addition to percentages with <code>-raw true</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>% mlprof -raw true tak mlmon.out
6.00 seconds of CPU time (0.00 seconds GC)
  function     cur    raw
------------- ----- -------
Tak.tak1.tak2 75.8% (4.55s)
Tak.tak1      24.2% (1.45s)</pre>
</div>
</div>
<div class="paragraph">
<p>Display the file name and line number for each function in addition to
its name with <code>-show-line true</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>% mlprof -show-line true tak mlmon.out
6.00 seconds of CPU time (0.00 seconds GC)
        function           cur
------------------------- -----
Tak.tak1.tak2  tak.sml: 5 75.8%
Tak.tak1  tak.sml: 3      24.2%</pre>
</div>
</div>
<div class="paragraph">
<p>Time profiling is designed to have a very small performance impact.
However, in some cases there will be a run-time performance cost,
which may perturb the results.</p>
</div>
<div class="paragraph">
<p>You can also compile with <code>-profile time -profile-branch true</code> to find
out how much time is spent in each branch of a function; see
<a href="ProfilingCounts">ProfilingCounts</a> for more details on <code>-profile-branch</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_caveats">Caveats</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With <code>-profile time</code>, use of the following in your program will cause
a run-time error, since they would interfere with the profiler signal
handler.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>MLton.Itimer.set (MLton.Itimer.Prof, &#8230;&#8203;)</code></p>
</li>
<li>
<p><code>MLton.Signal.setHandler (MLton.Signal.prof, &#8230;&#8203;)</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Also, because of the random sampling used to implement <code>-profile
time</code>, it is best to have a long running program (at least tens of
seconds) in order to get reasonable time</p>
</div>
</div>
</div>
</div>
<div id="mlton-footer">
<div id="mlton-footer-text">
<div>
Last updated Thu Oct 21 15:53:06 2021 -0400 by Matthew Fluet.
<a href="https://github.com/MLton/mlton/commits/master/doc/guide/src/ProfilingTime.adoc">Log</a>
<a href="https://github.com/MLton/mlton/edit/master/doc/guide/src/ProfilingTime.adoc">Edit</a>
</div>
</div>
</body>
</html>