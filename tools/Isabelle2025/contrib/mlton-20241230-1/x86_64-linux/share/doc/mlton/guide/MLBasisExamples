<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>MLBasisExamples</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<link rel="stylesheet" href="./asciidoctor.css">
<link rel="stylesheet" href="./rouge-github.css">
<link rel="stylesheet" href="./mlton.css">

</head>
<body class="article">
<div id="mlton-header">
<div id="mlton-header-text">
<h2>
<a href="./Home">
MLton
20241230
</a>
</h2>
</div>
</div>
<div id="header">
<h1>MLBasisExamples</h1>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Here are some example uses of <a href="MLBasis">ML Basis</a> files.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_complete_program">Complete program</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Suppose your complete program consists of the files <code>file1.sml</code>, &#8230;&#8203;,
<code>filen.sml</code>, which depend upon libraries <code>lib1.mlb</code>, &#8230;&#8203;, <code>libm.mlb</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(* import libraries *)
lib1.mlb
...
libm.mlb

(* program files *)
file1.sml
...
filen.sml</pre>
</div>
</div>
<div class="paragraph">
<p>The bases denoted by <code>lib1.mlb</code>, &#8230;&#8203;, <code>libm.mlb</code> are merged (bindings
of names in later bases take precedence over bindings of the same name
in earlier bases), producing a basis in which <code>file1.sml</code>, &#8230;&#8203;,
<code>filen.sml</code> are elaborated, adding additional bindings to the basis.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_export_filter">Export filter</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Suppose you only want to export certain structures, signatures, and
functors from a collection of files.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>local
  file1.sml
  ...
  filen.sml
in
  (* export filter here *)
  functor F
  structure S
end</pre>
</div>
</div>
<div class="paragraph">
<p>While <code>file1.sml</code>, &#8230;&#8203;, <code>filen.sml</code> may declare top-level identifiers
in addition to <code>F</code> and <code>S</code>, such names are not accessible to programs
and libraries that import this <code>.mlb</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_export_filter_with_renaming">Export filter with renaming</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Suppose you want an export filter, but want to rename one of the
modules.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>local
  file1.sml
  ...
  filen.sml
in
  (* export filter, with renaming, here *)
  functor F
  structure S' = S
end</pre>
</div>
</div>
<div class="paragraph">
<p>Note that <code>functor F</code> is an abbreviation for <code>functor F = F</code>, which
simply exports an identifier under the same name.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_import_filter">Import filter</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Suppose you only want to import a functor <code>F</code> from one library and a
structure <code>S</code> from another library.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>local
  lib1.mlb
in
  (* import filter here *)
  functor F
end
local
  lib2.mlb
in
  (* import filter here *)
  structure S
end
file1.sml
...
filen.sml</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_import_filter_with_renaming">Import filter with renaming</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Suppose you want to import a structure <code>S</code> from one library and
another structure <code>S</code> from another library.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>local
  lib1.mlb
in
  (* import filter, with renaming, here *)
  structure S1 = S
end
local
  lib2.mlb
in
  (* import filter, with renaming, here *)
  structure S2 = S
end
file1.sml
...
filen.sml</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_full_basis">Full Basis</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Since the Modules level of SML is the natural means for organizing
program and library components, MLB files provide convenient syntax
for renaming Modules level identifiers (in fact, renaming of functor
identifiers provides a mechanism that is not available in SML).
However, please note that <code>.mlb</code> files elaborate to full bases
including top-level types and values (including infix status), in
addition to structures, signatures, and functors.  For example,
suppose you wished to extend the <a href="BasisLibrary">Basis Library</a> with an
<code>('a, 'b) either</code> datatype corresponding to a disjoint sum; the type
and some operations should be available at the top-level;
additionally, a signature and structure provide the complete
interface.</p>
</div>
<div class="paragraph">
<p>We could use the following files.</p>
</div>
<div class="paragraph">
<p><code>either-sigs.sml</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">signature</span> <span class="nn">EITHER_GLOBAL</span> <span class="p">=</span>
  <span class="kr">sig</span>
    <span class="kr">datatype</span> <span class="p">(</span><span class="nd">'a</span><span class="p">,</span> <span class="nd">'b</span><span class="p">)</span> <span class="kt">either</span> <span class="p">=</span> <span class="nc">Left</span> <span class="kr">of</span> <span class="nd">'a</span> <span class="p">|</span> <span class="nc">Right</span> <span class="kr">of</span> <span class="nd">'b</span>
    <span class="kr">val</span> <span class="nv">&amp;</span>  <span class="p">:</span> <span class="p">(</span><span class="nd">'a</span> <span class="p">-&gt;</span> <span class="nd">'c</span><span class="p">)</span> <span class="n">*</span> <span class="p">(</span><span class="nd">'b</span> <span class="p">-&gt;</span> <span class="nd">'c</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="nd">'a</span><span class="p">,</span> <span class="nd">'b</span><span class="p">)</span> <span class="n">either</span> <span class="p">-&gt;</span> <span class="nd">'c</span>
    <span class="kr">val</span> <span class="nv">&amp;&amp;</span> <span class="p">:</span> <span class="p">(</span><span class="nd">'a</span> <span class="p">-&gt;</span> <span class="nd">'c</span><span class="p">)</span> <span class="n">*</span> <span class="p">(</span><span class="nd">'b</span> <span class="p">-&gt;</span> <span class="nd">'d</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="nd">'a</span><span class="p">,</span> <span class="nd">'b</span><span class="p">)</span> <span class="n">either</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="nd">'c</span><span class="p">,</span> <span class="nd">'d</span><span class="p">)</span> <span class="n">either</span>
  <span class="kr">end</span>

<span class="kr">signature</span> <span class="nn">EITHER</span> <span class="p">=</span>
  <span class="kr">sig</span>
    <span class="kr">include</span> <span class="nn">EITHER_GLOBAL</span>
    <span class="kr">val</span> <span class="nv">isLeft</span>  <span class="p">:</span> <span class="p">(</span><span class="nd">'a</span><span class="p">,</span> <span class="nd">'b</span><span class="p">)</span> <span class="n">either</span> <span class="p">-&gt;</span> <span class="n">bool</span>
    <span class="kr">val</span> <span class="nv">isRight</span> <span class="p">:</span> <span class="p">(</span><span class="nd">'a</span><span class="p">,</span> <span class="nd">'b</span><span class="p">)</span> <span class="n">either</span> <span class="p">-&gt;</span> <span class="n">bool</span>
    <span class="p">...</span>
  <span class="kr">end</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>either-strs.sml</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">structure</span> <span class="nn">Either</span> <span class="p">:</span> <span class="n">EITHER</span> <span class="p">=</span>
  <span class="kr">struct</span>
    <span class="kr">datatype</span> <span class="p">(</span><span class="nd">'a</span><span class="p">,</span> <span class="nd">'b</span><span class="p">)</span> <span class="kt">either</span> <span class="p">=</span> <span class="nc">Left</span> <span class="kr">of</span> <span class="nd">'a</span> <span class="p">|</span> <span class="nc">Right</span> <span class="kr">of</span> <span class="nd">'b</span>
    <span class="kr">fun</span> <span class="nf">f</span> <span class="n">&amp;</span> <span class="n">g</span> <span class="p">=</span> <span class="kr">fn</span> <span class="n">x</span> <span class="p">=&gt;</span>
      <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="n">Left</span> <span class="n">z</span> <span class="p">=&gt;</span> <span class="n">f</span> <span class="n">z</span> <span class="p">|</span> <span class="n">Right</span> <span class="n">z</span> <span class="p">=&gt;</span> <span class="n">g</span> <span class="n">z</span>
    <span class="kr">fun</span> <span class="nf">f</span> <span class="n">&amp;&amp;</span> <span class="n">g</span> <span class="p">=</span> <span class="p">(</span><span class="n">Left</span> <span class="n">o</span> <span class="n">f</span><span class="p">)</span> <span class="n">&amp;</span> <span class="p">(</span><span class="n">Right</span> <span class="n">o</span> <span class="n">g</span><span class="p">)</span>
    <span class="kr">fun</span> <span class="nf">isLeft</span> <span class="n">x</span> <span class="p">=</span> <span class="p">((</span><span class="kr">fn</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="n">true</span><span class="p">)</span> <span class="n">&amp;</span> <span class="p">(</span><span class="kr">fn</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="n">false</span><span class="p">))</span> <span class="n">x</span>
    <span class="kr">fun</span> <span class="nf">isRight</span> <span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">not</span> <span class="n">o</span> <span class="n">isLeft</span><span class="p">)</span> <span class="n">x</span>
    <span class="p">...</span>
  <span class="kr">end</span>
<span class="kr">structure</span> <span class="nn">EitherGlobal</span> <span class="p">:</span> <span class="n">EITHER_GLOBAL</span> <span class="p">=</span> <span class="n">Either</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>either-infixes.sml</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">infixr</span> <span class="mi">3</span> <span class="n">&amp;</span> <span class="n">&amp;&amp;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>either-open.sml</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">open</span> <span class="nn">EitherGlobal</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>either.mlb</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre>either-infixes.sml
local
  (* import Basis Library *)
  $(SML_LIB)/basis/basis.mlb
  either-sigs.sml
  either-strs.sml
in
  signature EITHER
  structure Either
  either-open.sml
end</pre>
</div>
</div>
<div class="paragraph">
<p>A client that imports <code>either.mlb</code> will have access to neither
<code>EITHER_GLOBAL</code> nor <code>EitherGlobal</code>, but will have access to the type
<code>either</code> and the values <code>&amp;</code> and <code>&amp;&amp;</code> (with infix status) in the
top-level environment.  Note that <code>either-infixes.sml</code> is outside the
scope of the local, because we want the infixes available in the
implementation of the library and to clients of the library.</p>
</div>
</div>
</div>
</div>
<div id="mlton-footer">
<div id="mlton-footer-text">
<div>
Last updated Thu Oct 21 15:53:06 2021 -0400 by Matthew Fluet.
<a href="https://github.com/MLton/mlton/commits/master/doc/guide/src/MLBasisExamples.adoc">Log</a>
<a href="https://github.com/MLton/mlton/edit/master/doc/guide/src/MLBasisExamples.adoc">Edit</a>
</div>
</div>
</body>
</html>