<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>GenerativeException</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<link rel="stylesheet" href="./asciidoctor.css">
<link rel="stylesheet" href="./rouge-github.css">
<link rel="stylesheet" href="./mlton.css">

</head>
<body class="article">
<div id="mlton-header">
<div id="mlton-header-text">
<h2>
<a href="./Home">
MLton
20241230
</a>
</h2>
</div>
</div>
<div id="header">
<h1>GenerativeException</h1>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In <a href="StandardML">Standard ML</a>, exception declarations are said to be
<em>generative</em>, because each time an exception declaration is evaluated,
it yields a new exception.</p>
</div>
<div class="paragraph">
<p>The following program demonstrates the generativity of exceptions.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">exception</span> <span class="nc">E</span>
<span class="kr">val</span> <span class="nv">e1</span> <span class="p">=</span> <span class="n">E</span>
<span class="kr">fun</span> <span class="nf">isE1</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">exn</span><span class="p">):</span> <span class="n">bool</span> <span class="p">=</span>
   <span class="kr">case</span> <span class="n">e</span> <span class="kr">of</span>
      <span class="n">E</span> <span class="p">=&gt;</span> <span class="n">true</span>
    <span class="p">|</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="n">false</span>
<span class="kr">exception</span> <span class="nc">E</span>
<span class="kr">val</span> <span class="nv">e2</span> <span class="p">=</span> <span class="n">E</span>
<span class="kr">fun</span> <span class="nf">isE2</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">exn</span><span class="p">):</span> <span class="n">bool</span> <span class="p">=</span>
   <span class="kr">case</span> <span class="n">e</span> <span class="kr">of</span>
      <span class="n">E</span> <span class="p">=&gt;</span> <span class="n">true</span>
    <span class="p">|</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="n">false</span>
<span class="kr">fun</span> <span class="nf">pb</span> <span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="n">bool</span><span class="p">):</span> <span class="n">unit</span> <span class="p">=</span>
   <span class="n">print</span> <span class="p">(</span><span class="n">concat</span> <span class="p">[</span><span class="nn">Bool</span><span class="p">.</span><span class="n">toString</span> <span class="n">b</span><span class="p">,</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">])</span>
<span class="kr">val</span> <span class="p">()</span> <span class="nv">=</span> <span class="p">(</span><span class="n">pb</span> <span class="p">(</span><span class="n">isE1</span> <span class="n">e1</span><span class="p">)</span>
          <span class="p">;</span><span class="n">pb</span> <span class="p">(</span><span class="n">isE1</span> <span class="n">e2</span><span class="p">)</span>
          <span class="p">;</span> <span class="n">pb</span> <span class="p">(</span><span class="n">isE2</span> <span class="n">e1</span><span class="p">)</span>
          <span class="p">;</span> <span class="n">pb</span> <span class="p">(</span><span class="n">isE2</span> <span class="n">e2</span><span class="p">))</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above program, two different exception declarations declare an
exception <code>E</code> and a corresponding function that returns <code>true</code> only on
that exception.  Although declared by syntactically identical
exception declarations, <code>e1</code> and <code>e2</code> are different exceptions.  The
program, when run, prints <code>true</code>, <code>false</code>, <code>false</code>, <code>true</code>.</p>
</div>
<div class="paragraph">
<p>A slight modification of the above program shows that even a single
exception declaration yields a new exception each time it is
evaluated.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">fun</span> <span class="nf">f</span> <span class="p">():</span> <span class="n">exn</span> <span class="n">*</span> <span class="p">(</span><span class="n">exn</span> <span class="p">-&gt;</span> <span class="n">bool</span><span class="p">)</span> <span class="p">=</span>
   <span class="kr">let</span>
      <span class="kr">exception</span> <span class="nc">E</span>
   <span class="kr">in</span>
      <span class="p">(</span><span class="n">E</span><span class="p">,</span> <span class="kr">fn</span> <span class="n">E</span> <span class="p">=&gt;</span> <span class="n">true</span> <span class="p">|</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="n">false</span><span class="p">)</span>
   <span class="kr">end</span>
<span class="kr">val</span> <span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">isE1</span><span class="p">)</span> <span class="nv">=</span> <span class="n">f</span> <span class="p">()</span>
<span class="kr">val</span> <span class="p">(</span><span class="n">e2</span><span class="p">,</span> <span class="n">isE2</span><span class="p">)</span> <span class="nv">=</span> <span class="n">f</span> <span class="p">()</span>
<span class="kr">fun</span> <span class="nf">pb</span> <span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="n">bool</span><span class="p">):</span> <span class="n">unit</span> <span class="p">=</span>
   <span class="n">print</span> <span class="p">(</span><span class="n">concat</span> <span class="p">[</span><span class="nn">Bool</span><span class="p">.</span><span class="n">toString</span> <span class="n">b</span><span class="p">,</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">])</span>
<span class="kr">val</span> <span class="p">()</span> <span class="nv">=</span> <span class="p">(</span><span class="n">pb</span> <span class="p">(</span><span class="n">isE1</span> <span class="n">e1</span><span class="p">)</span>
          <span class="p">;</span> <span class="n">pb</span> <span class="p">(</span><span class="n">isE1</span> <span class="n">e2</span><span class="p">)</span>
          <span class="p">;</span> <span class="n">pb</span> <span class="p">(</span><span class="n">isE2</span> <span class="n">e1</span><span class="p">)</span>
          <span class="p">;</span> <span class="n">pb</span> <span class="p">(</span><span class="n">isE2</span> <span class="n">e2</span><span class="p">))</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Each call to <code>f</code> yields a new exception and a function that returns
<code>true</code> only on that exception.  The program, when run, prints <code>true</code>,
<code>false</code>, <code>false</code>, <code>true</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_type_safety">Type Safety</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Exception generativity is required for type safety.  Consider the
following valid SML program.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="sml"><span class="kr">fun</span> <span class="nf">f</span> <span class="p">():</span> <span class="p">(</span><span class="nd">'a</span> <span class="p">-&gt;</span> <span class="n">exn</span><span class="p">)</span> <span class="n">*</span> <span class="p">(</span><span class="n">exn</span> <span class="p">-&gt;</span> <span class="nd">'a</span><span class="p">)</span> <span class="p">=</span>
   <span class="kr">let</span>
      <span class="kr">exception</span> <span class="nc">E</span> <span class="kr">of</span> <span class="nd">'a</span>
   <span class="kr">in</span>
      <span class="p">(</span><span class="n">E</span><span class="p">,</span> <span class="kr">fn</span> <span class="n">E</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">|</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="kr">raise</span> <span class="n">Fail</span> <span class="s2">"f"</span><span class="p">)</span>
   <span class="kr">end</span>
<span class="kr">fun</span> <span class="nf">cast</span> <span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nd">'a</span><span class="p">):</span> <span class="nd">'b</span> <span class="p">=</span>
   <span class="kr">let</span>
      <span class="kr">val</span> <span class="p">(</span><span class="n">make:</span> <span class="nd">'a</span> <span class="n">-&gt;</span> <span class="n">exn</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="nv">=</span> <span class="n">f</span> <span class="p">()</span>
      <span class="kr">val</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">get:</span> <span class="n">exn</span> <span class="n">-&gt;</span> <span class="nd">'b</span><span class="p">)</span> <span class="nv">=</span> <span class="n">f</span> <span class="p">()</span>
   <span class="kr">in</span>
      <span class="n">get</span> <span class="p">(</span><span class="n">make</span> <span class="n">a</span><span class="p">)</span>
   <span class="kr">end</span>
<span class="kr">val</span> <span class="nv">_</span> <span class="p">=</span> <span class="p">((</span><span class="n">cast</span> <span class="mi">13</span><span class="p">):</span> <span class="n">int</span> <span class="p">-&gt;</span> <span class="n">int</span><span class="p">)</span> <span class="mi">14</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If exceptions weren&#8217;t generative, then each call <code>f ()</code> would yield
the same exception constructor <code>E</code>.  Then, our <code>cast</code> function could
use <code>make: 'a -&gt; exn</code> to convert any value into an exception and then
<code>get: exn -&gt; 'b</code> to convert that exception to a value of arbitrary
type.  If <code>cast</code> worked, then we could cast an integer as a function
and apply.  Of course, because of generative exceptions, this program
raises <code>Fail "f"</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_applications">Applications</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>exn</code> type is effectively a <a href="UniversalType">universal type</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_also_see">Also see</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="GenerativeDatatype">GenerativeDatatype</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div id="mlton-footer">
<div id="mlton-footer-text">
<div>
Last updated Thu Oct 21 15:53:06 2021 -0400 by Matthew Fluet.
<a href="https://github.com/MLton/mlton/commits/master/doc/guide/src/GenerativeException.adoc">Log</a>
<a href="https://github.com/MLton/mlton/edit/master/doc/guide/src/GenerativeException.adoc">Edit</a>
</div>
</div>
</body>
</html>