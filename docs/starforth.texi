\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename starforth.info
@settitle StarForth Manual
@c %**end of header

@copying
This manual is for StarForth (version 1.1.0), a high-performance FORTH-79 virtual machine.

Copyright @copyright{} 2025 Robert A. James

@quotation
This work is released into the public domain under the Creative Commons Zero v1.0 Universal license.
@end quotation
@end copying

@titlepage
@title StarForth Manual
@subtitle High-Performance FORTH-79 Virtual Machine
@author Robert A. James

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top StarForth

This manual is for StarForth (version 1.1.0).
@end ifnottex

@menu
* Introduction::        Overview of StarForth
* Getting Started::     Installation and first steps
* Command Line::        Command-line options
* FORTH Words::         Complete word reference
* Block Storage::       Block storage system
* Profiling::           Performance profiling
* Testing::             Test suite and quality assurance
* Packaging::           Building packages
* Index::               Complete index
@end menu

@node Introduction
@chapter Introduction

StarForth is a production-ready FORTH-79 virtual machine with modern extensions, designed for embedded systems, operating system development, and interactive programming.

@section Features

@itemize @bullet
@item 100% FORTH-79 standard compliant
@item High-performance direct-threaded VM
@item Inline assembly optimizations (x86_64, ARM64)
@item Profile-guided optimization support
@item Comprehensive test suite (783 tests, 93.5% pass rate)
@item Block storage system with versioning
@item Word execution profiling and hot word analysis
@item Multi-architecture support
@item Automatic dictionary cleanup in tests
@end itemize

@section Performance

StarForth achieves exceptional performance:

@itemize @bullet
@item 50-100 million operations/second on modern hardware
@item Zero-overhead abstractions
@item Direct-threaded VM architecture
@item LTO (Link-Time Optimization)
@item Profile-guided optimization
@end itemize

@node Getting Started
@chapter Getting Started

@section Building from Source

@example
make fastest
@end example

@section Installation

@example
sudo make install
@end example

This installs:
@itemize @bullet
@item Binary: @file{/usr/local/bin/starforth}
@item Config: @file{/usr/local/etc/starforth/init.4th}
@item Man page: @file{/usr/local/share/man/man1/starforth.1}
@item Documentation: @file{/usr/local/share/doc/starforth/}
@end itemize

@section First Steps

Start the REPL:
@example
starforth
@end example

Execute Forth code:
@example
starforth -c ": HELLO .\" Hello, World!\" CR ; HELLO BYE"
@end example

@node Command Line
@chapter Command-Line Options

@table @option
@item -h, --help
Display help message and exit

@item -v, --version
Display version information and exit

@item -c @var{command}
Execute @var{command} and exit

@item --run-tests
Run comprehensive test suite

@item --break-me
Ultra-comprehensive diagnostic mode with markdown report generation

@item --benchmark [@var{n}]
Run performance benchmarks (@var{n} iterations, default: 1000)

@item --profile-level @var{n}
Set profiling level (0=disabled, 1=basic, 2=detailed, 3=verbose)

@item --profile-report
Show profiling report at exit

@item --log-level @var{level}
Set log level: debug, info, warn, error, none
@end table

@node FORTH Words
@chapter FORTH Word Reference

@section Stack Manipulation

@table @code
@item DUP ( n -- n n )
Duplicate top stack item

@item DROP ( n -- )
Remove top stack item

@item SWAP ( n1 n2 -- n2 n1 )
Exchange top two stack items

@item OVER ( n1 n2 -- n1 n2 n1 )
Copy second stack item to top

@item ROT ( n1 n2 n3 -- n2 n3 n1 )
Rotate top three stack items
@end table

@section Arithmetic

@table @code
@item + ( n1 n2 -- n3 )
Add n1 and n2

@item - ( n1 n2 -- n3 )
Subtract n2 from n1

@item * ( n1 n2 -- n3 )
Multiply n1 and n2

@item / ( n1 n2 -- n3 )
Divide n1 by n2

@item MOD ( n1 n2 -- n3 )
Remainder of n1 divided by n2
@end table

@section StarForth Extensions

@table @code
@item INIT ( -- )
System initialization from init.4th

@item ENTROPY@@ ( addr -- n )
Fetch word execution count

@item ENTROPY! ( n addr -- )
Store word execution count

@item WORD-ENTROPY ( -- )
Display execution statistics for all words

@item TOP-WORDS ( n -- )
Display top N most frequently executed words

@item (- ( -- )
Comment to end of line
@end table

@node Block Storage
@chapter Block Storage System

StarForth provides a comprehensive block storage system:

@section Block Words

@table @code
@item BLOCK ( n -- addr )
Return address of block n

@item LOAD ( n -- )
Load and interpret block n

@item THRU ( start end -- )
Load blocks from start through end

@item LIST ( n -- )
Display block n

@item UPDATE ( -- )
Mark current block as modified
@end table

@node Profiling
@chapter Performance Profiling

Enable profiling to track word execution frequency:

@example
starforth --profile-level 1 --profile-report
@end example

@section Profiling Levels

@table @asis
@item Level 0 (DISABLED)
No profiling overhead

@item Level 1 (BASIC)
Word frequency tracking (1-2% overhead)

@item Level 2 (DETAILED)
Full timing and call graphs (5-10% overhead)

@item Level 3 (VERBOSE)
Complete diagnostic data (15-20% overhead)
@end table

@node Testing
@chapter Test Suite and Quality Assurance

@section Running Tests

Run all tests:
@example
starforth --run-tests
@end example

Run ultra-comprehensive diagnostic:
@example
starforth --break-me
@end example

@section Test Statistics

@itemize @bullet
@item 783 total tests
@item 728 passed (93.5%)
@item 49 skipped (platform-specific)
@item 0 failed
@item 0 errors
@end itemize

@node Packaging
@chapter Building Packages

@section Debian Package

@example
dpkg-buildpackage -us -uc
@end example

@section RPM Package

@example
rpmbuild -ba starforth.spec
@end example

@node Index
@unnumbered Index

@printindex cp

@bye