// QUAL PIPELINE - Formal verification gate (25 minutes)
// Triggered: Auto-sync from test branch
// Purpose: Isabelle/HOL formal verification, per-defect CAPA generation
// Gate: PASS notifies PM for release approval, FAIL generates CAPAs and rejects

pipeline {
	agent any

	environment {
		ARCH = 'amd64'
		BUILD_DIR = 'build'
		ARTIFACT_DIR = 'artifacts'
		LOG_DIR = 'logs'
		CAPA_DIR = 'docs/internal/capa'
		BENCHMARK_ITERATIONS = '5000000'
	}

	options {
		skipDefaultCheckout(false)
		buildDiscarder(logRotator(numToKeepStr: '20'))
		timeout(time: 60, unit: 'MINUTES')
		timestamps()
	}

	stages {
		stage('Cleanup & Build') {
			steps {
				sh 'git reset --hard origin/HEAD && make clean || true'
				sh 'rm -rf ${ARTIFACT_DIR} ${LOG_DIR} && mkdir -p ${ARTIFACT_DIR} ${LOG_DIR} ${CAPA_DIR}'
				sh 'make fastest 2>&1 | tee ${LOG_DIR}/build-fastest.log'
				sh 'cp build/starforth ${ARTIFACT_DIR}/starforth-qual'
			}
		}

		stage('Smoke Test') {
			steps {
				sh 'make smoke 2>&1 | tee ${LOG_DIR}/smoke-test.log'
			}
		}

		stage('Comprehensive Test Suite') {
			steps {
				sh 'make test 2>&1 | tee ${LOG_DIR}/full-test-suite.log'
				sh '''
                    echo "Test Results Summary:" | tee ${LOG_DIR}/test-summary.txt
                    grep -E "(passed|failed|skipped)" ${LOG_DIR}/full-test-suite.log | tail -5 | tee -a ${LOG_DIR}/test-summary.txt || true
                '''
			}
		}

		stage('Benchmark Gauntlet') {
			steps {
				timeout(time: 10, unit: 'MINUTES') {
					sh 'make bench 2>&1 | tee ${LOG_DIR}/bench-quick.log'
					sh 'make benchmark 2>&1 | tee ${LOG_DIR}/bench-full.log'
					sh '''
                        /usr/bin/time -v ./build/starforth --benchmark ${BENCHMARK_ITERATIONS} --log-none 2>&1 | tee ${LOG_DIR}/bench-stack.log || true
                        /usr/bin/time -v ./build/starforth --benchmark ${BENCHMARK_ITERATIONS} --log-none 2>&1 | tee ${LOG_DIR}/bench-math.log || true
                        /usr/bin/time -v ./build/starforth --benchmark ${BENCHMARK_ITERATIONS} --log-none 2>&1 | tee ${LOG_DIR}/bench-logic.log || true
                    '''
				}
			}
		}

		stage('Stress Tests') {
			steps {
				timeout(time: 5, unit: 'MINUTES') {
					sh 'timeout 300 ./build/starforth --stress-tests --log-none 2>&1 | tee ${LOG_DIR}/stress.log || true'
				}
			}
		}

		stage('Formal Verification - GATE') {
			steps {
				sh '''
                    echo "Building Isabelle theories (audit mode)..."
                    if command -v isabelle &> /dev/null; then
                        make docs-isabelle 2>&1 | tee ${LOG_DIR}/isabelle-build.log || echo "Theories incomplete"
                        make refinement-status 2>&1 | tee ${LOG_DIR}/refinement-status.log || true
                    else
                        echo "Isabelle not installed - skipping formal verification"
                    fi
                '''
			}
		}

		stage('Generate CAPA per Defect') {
			steps {
				sh '''
                    mkdir -p ${CAPA_DIR}
                    TIMESTAMP=$(date +%Y%m%d-%H%M%S)

                    if grep -q "FAILED\|ERROR\|fail" ${LOG_DIR}/full-test-suite.log 2>/dev/null; then
                        echo "Defects found - generating CAPAs..."
                        FAILURE_COUNT=$(grep -c "FAILED\|ERROR" ${LOG_DIR}/full-test-suite.log || echo "1")

                        for i in $(seq 1 $FAILURE_COUNT); do
                            DEFECT_ID="DEFECT-$(printf "%03d" $((100 + $i)))"
                            CAPA_FILE="${CAPA_DIR}/CAPA-${DEFECT_ID}-${TIMESTAMP}.adoc"

                            cat > "$CAPA_FILE" << EOF
= $DEFECT_ID
:toc:

== Defect Metadata
- **Defect ID:** $DEFECT_ID
- **Found in Stage:** QUAL
- **Build:** ${BUILD_NUMBER}
- **Timestamp:** $(date)

== Test Failure Details
$(tail -30 ${LOG_DIR}/full-test-suite.log | head -15)

== Failure Category
Review test logs for details

== Evidence
- Build: ${BUILD_URL}
- Log: full-test-suite.log

== Status
OPEN - Awaiting fix from devl branch

EOF
                            echo "Generated: $CAPA_FILE"
                        done
                        cp ${CAPA_DIR}/*.adoc ${ARTIFACT_DIR}/ 2>/dev/null || true
                    else
                        echo "✅ No defects found"
                    fi
                '''
			}
		}

		stage('Memory Leak Detection') {
			when {
				expression { fileExists('/usr/bin/valgrind') }
			}
			steps {
				timeout(time: 5, unit: 'MINUTES') {
					sh 'make clean && make debug'
					sh '''
                        timeout 300 valgrind --leak-check=summary --log-file=${LOG_DIR}/valgrind.log \
                            ./build/starforth --benchmark 1000 || true
                    '''
				}
			}
		}

		stage('Code Quality') {
			steps {
				sh '''
                    make clean
                    make CFLAGS="$(make -n | grep CFLAGS | head -1 | sed 's/.*CFLAGS=//' | cut -d' ' -f1-20) -Wall -Wextra -Wpedantic" 2>&1 | tee ${LOG_DIR}/warnings.log || true
                '''
			}
		}
	}

	post {
		always {
			archiveArtifacts artifacts: 'logs/**, artifacts/**, docs/internal/capa/**', allowEmptyArchive: true
		}

		success {
			sh 'echo "✅ QUAL PASSED - Ready for PM approval"'
			emailext(
				subject: "StarForth QUAL PASSED - Ready for Release (Build ${BUILD_NUMBER})",
				body: '''
                    Build: ${BUILD_URL}

                    Status: ✅ QUAL PIPELINE PASSED

                    All tests and formal verification complete.
                    Ready for PM release approval.

                    Next: Click "Approve for Release" in Jenkins to proceed to PROD.

                    Artifacts: ${BUILD_URL}artifact/artifacts/
                ''',
                to: 'rajames440@gmail.com'
			)
		}

		failure {
			sh '''
                echo "❌ QUAL FAILED"
                git reset --hard origin/test
                git push origin qual --force-with-lease || true
            '''
			emailext(
				subject: "StarForth QUAL FAILED - CAPAs Generated (Build ${BUILD_NUMBER})",
				body: '''
                    Build: ${BUILD_URL}

                    Status: ❌ QUAL FAILED

                    Defects found. CAPAs generated in docs/internal/capa/

                    Action: Fix defects and re-submit to devl

                    CAPAs: ${BUILD_URL}artifact/artifacts/
                ''',
                to: 'rajames440@gmail.com'
			)
		}
	}
}