-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

////
StarForth Architecture Overview

Document Metadata:
- - Document ID: starforth-governance/architecture-overview
- - Version: 1.0.0
- - Created: 2025-10-25
- - Purpose: High-level description of StarForth architecture
- - Scope: Component structure, data flow, control flow
- - Status: COMPLETE
////

= StarForth Architecture Overview

**Version:** 1.0.0
**Status:** Complete
**Last Updated:** 2025-10-25

- ---

== What is StarForth?

StarForth is a **FORTH-79 virtual machine** implemented in ANSI C99 with:

- - **Execution Model:** Direct-threaded interpreter
- - **Memory Model:** Fixed 5MB linear address space
- - **Stack Model:** Two stacks (data and return), 1024 cells each
- - **Word Implementation:** 19 specialized modules implementing 138+ FORTH-79 core words
- - **Architecture:** Modular, layered design separating concerns

- ---

== System Architecture

=== Architectural Layers

```
┌─────────────────────────────────────────────────────────────┐
│           REPL & Application Entry Point                     │
│                    (main.c, repl.c)                         │
└─────────────────────────────────────────────────────────────┘
                            │
┌─────────────────────────────────────────────────────────────┐
│         FORTH-79 Word Implementations (19 Modules)           │
│  ┌──────────────────────────────────────────────────────┐   │
│  │ arithmetic_words.c        (18 words)                 │   │
│  │ stack_words.c             (11 words)                 │   │
│  │ memory_words.c            (6 words)                  │   │
│  │ control_words.c           (16+ words)                │   │
│  │ defining_words.c          (14 words)                 │   │
│  │ ... and 14 more modules implementing 138+ words      │   │
│  └──────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────┘
                            │
┌─────────────────────────────────────────────────────────────┐
│                   VM Core Layer                              │
│  ┌───────────────────────────────────────────────────┐       │
│  │ vm.c              - Interpretation engine          │       │
│  │ vm_api.c          - Public API                     │       │
│  │ vm_debug.c        - Debugging utilities            │       │
│  │ word_registry.c   - Word registration & lookup     │       │
│  │ dictionary_management.c - Dictionary operations    │       │
│  └───────────────────────────────────────────────────┘       │
└─────────────────────────────────────────────────────────────┘
                            │
┌─────────────────────────────────────────────────────────────┐
│            Supporting Infrastructure                         │
│  ┌───────────────────────────────────────────────────┐       │
│  │ block_subsystem.c   - Block storage abstraction    │       │
│  │ blkio_*.c           - I/O device implementations    │       │
│  │ memory_management.c - Memory allocation            │       │
│  │ stack_management.c  - Stack validation             │       │
│  │ platform/*.c        - Platform-specific code       │       │
│  │ log.c, io.c         - Logging and I/O              │       │
│  └───────────────────────────────────────────────────┘       │
└─────────────────────────────────────────────────────────────┘
                            │
┌─────────────────────────────────────────────────────────────┐
│        Operating System / Hardware Interface                 │
│  (POSIX file I/O, memory mapping, signal handling)           │
└─────────────────────────────────────────────────────────────┘
```

- ---

== Core Components

=== 1. Virtual Machine (vm.c, vm_api.c)

**Responsibility:** Execute Forth programs by interpreting words

**Key Functions:**
- - `vm_init()` - Initialize VM state, allocate memory, register words
- - `vm_interpret()` - Main interpretation loop (parse → lookup → execute)
- - `vm_execute_word()` - Execute a single word
- - `vm_load_cell()` / `vm_store_cell()` - Safe memory access

**State Managed:**
- - Data stack (1024 cells)
- - Return stack (1024 cells)
- - Dictionary (linked list of words)
- - Execution state (compile/interpret mode)
- - Memory arena (5MB)

=== 2. Word Registry (word_registry.c)

**Responsibility:** Register and lookup words

**Key Functions:**
- - `register_word()` - Add new word to dictionary
- - `find_word()` - Search for word by name
- - `lookup_word()` - Get execution function for word

**Data Structure:** Linked list with first-character optimization

=== 3. Dictionary Management (dictionary_management.c)

**Responsibility:** Manage word definitions and memory allocation

**Key Functions:**
- - `alloc_dict()` - Allocate space in dictionary
- - `link_word()` - Link new word to chain
- - `forget_word()` - Remove word and reclaim space

=== 4. Control Flow (control_words.c)

**Responsibility:** Implement conditional and loop structures

**Compile-Time Support:**
- - Compile-time stack for nesting
- - Forward reference resolution
- - Branch patching

**Runtime Support:**
- - Loop variable stack (I, J)
- - Exit handling
- - Branch execution

=== 5. Block Subsystem (block_subsystem.c)

**Responsibility:** Abstract block storage layer

**Pluggable Implementations:**
- - RAM-backed (blkio_ram.c) - Suitable for testing
- - File-backed (blkio_file.c) - Persistent storage

**Operations:**
- - Read block
- - Write block
- - Flush buffers
- - Cache management

- ---

== Data Flow

=== Execution of "5 DUP +"

```
Input: "5 DUP +"
         │
         ↓
    Parser: Extract tokens
         │
         ├─→ "5" → Numeric literal
         ├─→ "DUP" → Word lookup
         └─→ "+" → Word lookup
         │
         ↓
    Lookup Words in Dictionary
         │
         ├─→ "5" → Execute (LIT) with value 5
         │         ↓ Push 5 onto data stack
         │
         ├─→ "DUP" → Execute word_dup()
         │            ↓ Duplicate TOS
         │
         └─→ "+" → Execute word_add()
                    ↓ Pop two, add, push result
         │
         ↓
    Result: Data stack contains [5, 5, 10]
```

=== Memory Layout

```
┌──────────────────────────────┐ 0x500000 (5 MB end)
│                              │
│  Block Storage / Logging     │ 3 MB - 5 MB
│  (USER_BLOCKS_START+)        │
│                              │
├──────────────────────────────┤ 3 MB
│                              │
│  User Blocks                 │ 2 MB - 3 MB
│  (USER_BLOCKS_START)         │
│                              │
├──────────────────────────────┤ 2 MB
│                              │
│  Dictionary                  │ 0 - 2 MB
│  (compiled definitions)      │
│                              │
└──────────────────────────────┘ 0x000000 (start)

VM Stacks (in RAM):
┌──────────────────────────────┐
│   Return Stack [1024 cells]  │
├──────────────────────────────┤
│   Data Stack [1024 cells]    │
└──────────────────────────────┘
```

=== Control Flow

**Interpretation Loop (vm.c):**
```
while (running) {
    1. Parse next word from input
    2. Search dictionary for word name
    3. Get DictEntry for word
    4. If IMMEDIATE or interpreting:
       - Call word's function with VM pointer
    5. If compiling and not IMMEDIATE:
       - Compile reference to word
}
```

**Word Execution:**
```
Each word = C function with signature:
    void word_name(struct VM *vm)

Function modifies VM state:
    - Pops arguments from data stack
    - Pushes results back to data stack
    - May access memory via vm->memory
    - May modify vm->here (dictionary pointer)
```

- ---

== The 19 Modules

**Arithmetic (18 words):** arithmetic_words.c
- - Implements: `+` `-` `*` `/` `MOD` `/MOD` `*/ */MOD` etc.

**Stack (11 words):** stack_words.c
- - Implements: `DUP` `DROP` `SWAP` `OVER` `ROT` `PICK` `ROLL` `DEPTH`

**Memory (6 words):** memory_words.c
- - Implements: `@` `!` `C@` `C!` `2@` `2!`

**Control (16+ words):** control_words.c
- - Implements: `IF` `THEN` `ELSE` `DO` `LOOP` `+LOOP` `BEGIN` `UNTIL` `I` `J`

**Dictionary (9 words):** dictionary_words.c
- - Implements: `HERE` `ALLOT` `,` `C,` `LATEST` `SP@` `SP!`

**I/O (5 words):** io_words.c
- - Implements: `EMIT` `KEY` `CR` `SPACE` `TYPE`

**Logical (5 words):** logical_words.c
- - Implements: `AND` `OR` `XOR` `NOT` comparison support

**String (4+ words):** string_words.c
- - Implements: `WORD` `COUNT` string operations

**Format (6+ words):** format_words.c
- - Implements: `<#` `#>` `#` `.` `.R` numeric formatting

**Block I/O (11 words):** block_words.c
- - Implements: `BLOCK` `BUFFER` `LOAD` `LIST` `THRU` `SAVE-BUFFERS`

**System (6+ words):** system_words.c
- - Implements: `QUIT` `ABORT` `COLD` `WARM` `.S` comments

**Vocabulary (4+ words):** vocabulary_words.c
- - Implements: `DEFINITIONS` vocabulary management

**Defining (14 words):** defining_words.c
- - Implements: `:` `;` `CREATE` `DOES>` `IMMEDIATE` `FORGET` `CONSTANT` `VARIABLE`

**Return Stack (3 words):** return_stack_words.c
- - Implements: `>R` `R>` `R@`

**Double Precision (3 words):** double_words.c
- - Implements: `S>D` `D+` `D-`

**Mixed Arithmetic (3 words):** mixed_arithmetic_words.c
- - Implements: `M+` `M-` `M*`

**Editor (4+ words):** editor_words.c
- - Implements: `L` `C` `D` `A` `I` editor operations

**Dictionary Manipulation (2+ words):** dictionary_manipulation_words.c
- - Implements: Low-level dictionary traversal

**StarForth Extensions (2+ words):** starforth_words.c
- - Implements: `ENTROPY@` `ENTROPY!` metadata access

- ---

== Key Design Principles

=== 1. Separation of Concerns
- - Word implementations isolated by domain
- - VM core independent of specific words
- - Block subsystem abstracted from storage details

=== 2. Direct-Threaded Execution
- - No bytecode interpreter
- - Each word = function pointer
- - Fast execution, simple implementation

=== 3. Fixed Memory Arena
- - Predictable memory use
- - No fragmentation
- - Suitable for embedded systems

=== 4. Modular Word Implementation
- - 19 modules, each responsible for domain
- - Easy to add new words
- - Clear dependencies between modules

=== 5. Platform Abstraction
- - Core VM independent of OS
- - Platform-specific code isolated
- - Same executable semantics across platforms

- ---

== Module Dependencies

All 19 word modules depend on:
- - `word_registry` (register words)
- - `vm` (access VM state)
- - `log` (logging)

Some modules have additional dependencies:
- - `control_words` → `dictionary_words`
- - `block_words` → `block_subsystem`
- - `defining_words` → `dictionary_words`

- ---

## Document History

[cols="^1,^2,2,<4"]
|===
| Version | Date | Author | Change Summary

| 1.0.0
| 2025-10-25
| Validation Engineer
| Created StarForth architecture overview
|===

- ---

== Document Approval & Signature

[cols="2,2,1"]
|===
| Role | Name/Title | Signature

| **Author/Maintainer**
| Robert A. James
|

| **Date Approved**
| 25 October, 2025|
| _______________

| **PGP Fingerprint**
| 497CF5C0D295A7E8065C5D9A9CD3FBE66B5E2AE4
|

|===

**PGP Signature Block:**
```
- -----BEGIN PGP SIGNATURE-----

[Your PGP signature here - generated via: gpg --clearsign ARCHITECTURE_OVERVIEW.adoc]

- -----END PGP SIGNATURE-----
```

**To Sign This Document:**
```bash
gpg --clearsign ARCHITECTURE_OVERVIEW.adoc
# This creates ARCHITECTURE_OVERVIEW.adoc.asc (signed version)
```

**To Verify Signature:**
```bash
gpg --verify ARCHITECTURE_OVERVIEW.adoc.asc
```

**Archive Location:** ~/StarForth-Governance/Validation/TIER_I_FOUNDATION/
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEESXz1wNKVp+gGXF2anNP75mteKuQFAmj9aocACgkQnNP75mte
KuTuXRAAwtZfykUiMe4RUgVBQnqWFiy1gXj80rQcRSEg2ppPXbG/ERNwJYG1cmGJ
+Aqq4qw65VyYcacnKT+wRY0LyFWjSmlAsCloPeLTfOGijbuPcTktBrbJAMMh6neB
fFRhO/7Cy00NFD8SsKbogaA797IYy9WavPXNKcwMuBdk7SYMuIB5/+2rcUmPbJE4
BBLxXZ+dIZehWp0eIa5aX4b6FTRATq7RrPle62FFNWGBhe+il//7CtWVscw/E+KC
cTRzl9Bda9s9LMZOJyQCHqlQcVXObJw1WMSV2YwePIYvccW52YjmbmLN2zWmeo4s
ca5PqE6w+EEuEYcGoABJuONONKSY10OkLsOV8lO2RbAzaYvSarlz1pvFDQkYwSu6
8YrGJDy2GHdCZmovogiDxFGZl4hMuEgrQFtDHg7CKuVwawZhn5ke40l0Ui8IL5RL
x1pf0c5vl6rTgRGLy7Xvw0u6WN5URXt2GwbTYani2BezUQ/yN6sbiiIjXfwuQuPA
hcZxnG0h2soe1eHCNd8MmYtwRjGt5WIV6PP39woY5X+9cxuKcpSreKL7VMGfJRBM
FanlIwimYjrWAvTSXOPEwQubkA24oSlKt0QF3j6RzC2dXY/p14KDP+6N6N+GPCFR
wvai3r7uwBs+2/T78tROHzgsNL0XRqTchXz4gDaCzZfvyfvMjEo=
=SRe7
-----END PGP SIGNATURE-----
