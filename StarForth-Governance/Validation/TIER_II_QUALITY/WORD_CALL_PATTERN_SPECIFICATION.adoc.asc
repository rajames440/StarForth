-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

////
StarForth Word Call Pattern Specification

Document Metadata:
- - Document ID: starforth-governance/word-call-pattern-specification
- - Version: 1.0.0
- - Purpose: Document how words are executed and called
- - Status: READY FOR VALIDATION
////

= StarForth Word Call Pattern Specification

**Document ID:** starforth-governance/word-call-pattern-specification
**Version:** 1.0.0
**Date:** 2025-10-25

- ---

== Execution Flow

All words follow identical pattern through the interpreter:

```
1. Input Parsing
   └─> Fetch word name from input stream

2. Dictionary Lookup
   └─> vm_find(word_name)
       ├─> Search linked-list dictionary
       ├─> Return DictEntry* or NULL
       └─> O(N) search time (N = number of words)

3. Word Location Validation
   └─> Check if DictEntry found
       ├─> If not found: UNKNOWN_WORD error
       └─> If found: proceed to execution

4. Execution (PRIMARY ACL INTEGRATION POINT)
   └─> vm_execute(dict_entry)
       ├─> Invoke dict_entry->func(vm)
       ├─> Word manipulates vm->data_stack
       ├─> Word modifies vm->memory (optional)
       └─> Return to interpreter

5. Result Processing
   └─> Stack updated, memory modified
       └─> Next word parsed
```

- ---

== Standard Word Signature

All FORTH-79 core words follow:

```c
void word_name(struct VM *vm)
{
    // Standard access pattern:
    // 1. Pop arguments from data stack
    cell_t arg1 = vm->data_stack[--vm->sp];
    cell_t arg2 = vm->data_stack[--vm->sp];

    // 2. Perform operation
    cell_t result = arg1 + arg2;

    // 3. Push results back
    vm->data_stack[vm->sp++] = result;
}
```

- ---

== ACL Integration Points

### At Dictionary Lookup (Before EXECUTE)

**Current Code:**
```c
DictEntry *word = find_word(vm, name);
if (word) {
    word->func(vm);  // Execute immediately
}
```

**With ACL:**
```c
DictEntry *word = find_word(vm, name);
if (word) {
    if (check_acl(vm->current_capability, word->required_capability)) {
        word->func(vm);  // Execute if capability granted
    } else {
        stack_push(vm, 0);  // Push error code
        // Or throw exception
    }
}
```

### During Word Execution (Function Entry)

**Current Code:**
```c
void word_add(struct VM *vm)
{
    // Direct stack access
}
```

**With ACL (Optional):**
```c
void word_add(struct VM *vm)
{
    // Capability already checked at lookup
    // No need for re-check here
}
```

### On Memory Access

**Current Code:**
```c
cell_t vm_load_cell(struct VM *vm, vaddr_t addr)
{
    if (addr >= vm->memory_size) error;
    return vm->memory[addr];
}
```

**With ACL (Optional):**
```c
cell_t vm_load_cell(struct VM *vm, vaddr_t addr)
{
    if (addr >= vm->memory_size) error;
    if (!check_memory_acl(vm->current_capability, addr, READ)) error;
    return vm->memory[addr];
}
```

- ---

== Word Categories

### Stack Operations (11 words)

Examples: DUP, DROP, SWAP, OVER, ROT
- - No memory access
- - Only operate on stacks
- - No system side effects

### Arithmetic (18 words)

Examples: +, -, *, /, MOD
- - No memory access beyond stack
- - Deterministic computation
- - No side effects

### Memory Operations (6 words)

Examples: @, !, C@, C!
- - **Require ACL:** Memory read/write capability
- - Address validation needed
- - Bounds checking required

### Control Flow (16+ words)

Examples: IF, THEN, DO, LOOP
- - **Require ACL:** None for logic itself
- - Sub-word execution inherits parent ACL
- - Nested definitions follow parent capability

### Dictionary Operations (9 words)

Examples: :, ;, ALLOT, HERE, CREATE
- - **Require ACL:** Dictionary modification capability
- - Add new words to dictionary
- - Allocate dictionary space

### I/O Operations (5 words)

Examples: EMIT, KEY, CR, TYPE
- - **Require ACL:** I/O capability
- - Character output/input
- - Terminal interaction

### System Words (6+ words)

Examples: QUIT, ABORT, COLD, WARM
- - **Require ACL:** System capability
- - State reset/modification
- - Process control

- ---

== Capability Model

### Proposed Capabilities

- - **READ:** Memory read access
- - **WRITE:** Memory write access
- - **EXECUTE:** Word execution
- - **ALLOCATE:** Dictionary allocation
- - **DEFINE:** Create new words
- - **IO:** Terminal I/O operations
- - **SYSTEM:** System-level operations

### Word Capability Requirements

[cols="1,2"]
|===
| Word Category | Required Capabilities

| Stack ops | EXECUTE (word itself)
| Arithmetic | EXECUTE (word itself)
| Memory read (@, C@) | EXECUTE + READ
| Memory write (!, C!) | EXECUTE + WRITE
| Dictionary (ALLOT, HERE) | EXECUTE + ALLOCATE
| Definition (:, ;) | EXECUTE + DEFINE
| I/O (EMIT, KEY) | EXECUTE + IO
| System (QUIT, ABORT) | EXECUTE + SYSTEM
|===

- ---

## Document Approval & Signature

[cols="2,2,1"]
|===
| Role | Name/Title | Signature

| **Author/Maintainer**
| Robert A. James
|

| **Date Approved**
| 25 October, 2025
| _______________

| **PGP Fingerprint**
| 497CF5C0D295A7E8065C5D9A9CD3FBE66B5E2AE4
|

|===

**Archive Location:** ~/StarForth-Governance/Validation/TIER_II_QUALITY/
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEESXz1wNKVp+gGXF2anNP75mteKuQFAmj9d88ACgkQnNP75mte
KuS4VA/9E7LujGh//R2/xSW0bEOpEh+zHicd4WgZM4tKAYEXXw03cMKJ2aAYngAf
Uzd8JgBKiFdv7m5fBHV7iDR5ogbVuSUlaPZw69fLrNftdAr2XcgVlOhAYHQAfM9J
ho+5iZXvH3mDwgbrMnbJVujqaGp+9kla6K/yNbiymLDSS9bwm+flJS2EdRmvLjxr
q/ldPJ9G5BmUET7AZDMn3cgt1aII5294GYCC/ImgOG5k/msu8oMK+0kG0hwjyMID
wMqS7VbTbj6BRMVlPo2z2sq1JM/V4OHtOw6hTnRcDmhm/4RDuho3HiQ7oqRGsn+f
l9V3EctMthXmoY6Cz5haSW9Pft1u6iqpIJf0O/REX8lPbSDqvRqRUGc19RGm4XSe
hGdpfd9xT5czcTtN+ATejfKpZwNJEkeaBEwG300KEi2WxFHQOjHTzsjiDhVamkgx
y54vVm4619X5P2RV3A+Oi+WOFJF+dBk7sZaiNZp+xp+6o7ZSbZVJGrgIC1hX6d3y
FybjWpVdUrSiViLrQLRfI1W2JrSct6lSq+lgj5y37rpwH1mYksAbyknV51lkMBN8
zvnP+DjueHwcgLndcHyRiUlBTETLzqX4VjII863My8aDua8OXJXBdGQLEuMUbyGz
6d5KYbshlVdeM3/XAg73qazqAh9ahODcT9ANn7QPe4G/8S1MQLM=
=VGjA
-----END PGP SIGNATURE-----
